// <auto-generated />
using System;
using FlowerSelling.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlowerSellingWebsite.Migrations
{
    [DbContext(typeof(FlowerSellingDbContext))]
    partial class FlowerSellingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DeliveryStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_Deliveries_PublicId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Flower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("FlowerCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlowerCategoryId")
                        .HasDatabaseName("IX_Flowers_FlowerCategoryId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Flowers_Name");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_Flowers_PublicId");

                    b.ToTable("Flowers");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlowerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BatchCode")
                        .HasDatabaseName("IX_FlowerBatches_BatchCode");

                    b.HasIndex("ExpiryDate")
                        .HasDatabaseName("IX_FlowerBatches_ExpiryDate");

                    b.HasIndex("FlowerId");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_FlowerBatches_PublicId");

                    b.HasIndex("SupplierId");

                    b.ToTable("FlowerBatches", t =>
                        {
                            t.HasCheckConstraint("CK_FlowerBatch_ExpiryDate_Greater_ImportDate", "[ExpiryDate] > [ImportDate]");

                            t.HasCheckConstraint("CK_FlowerBatch_QuantityAvailable_LessOrEqual_Quantity", "[QuantityAvailable] <= [Quantity]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_FlowerCategories_PublicId");

                    b.ToTable("FlowerCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Roses",
                            Color = "Red",
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Beautiful roses for all occasions",
                            IsActive = true,
                            IsDeleted = false,
                            PublicId = new Guid("aaaaaaaa-1111-1111-1111-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Tulips",
                            Color = "Yellow",
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Elegant tulips",
                            IsActive = true,
                            IsDeleted = false,
                            PublicId = new Guid("bbbbbbbb-2222-2222-2222-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Orchids",
                            Color = "Purple",
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Exotic orchids",
                            IsActive = true,
                            IsDeleted = false,
                            PublicId = new Guid("cccccccc-3333-3333-3333-cccccccccccc")
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Lilies",
                            Color = "White",
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Graceful lilies",
                            IsActive = true,
                            IsDeleted = false,
                            PublicId = new Guid("dddddddd-4444-4444-4444-dddddddddddd")
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Carnations",
                            Color = "Pink",
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Colorful carnations",
                            IsActive = true,
                            IsDeleted = false,
                            PublicId = new Guid("eeeeeeee-5555-5555-5555-eeeeeeeeeeee")
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerDamageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DamageDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DamageQuantity")
                        .HasColumnType("int");

                    b.Property<string>("DamageReason")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlowerBatchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReportedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlowerBatchId");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_FlowerDamageLogs_PublicId");

                    b.HasIndex("ReportedByUserId");

                    b.ToTable("FlowerDamageLogs");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlowerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_FlowerPhotos_PublicId");

                    b.HasIndex("FlowerId", "IsPrimary")
                        .IsUnique()
                        .HasDatabaseName("IX_FlowerPhotos_FlowerId_IsPrimary_Unique")
                        .HasFilter("[IsPrimary] = 1");

                    b.ToTable("FlowerPhotos");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EstimatedTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FinalTotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaleOrder")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .HasDatabaseName("IX_Orders_OrderDate");

                    b.HasIndex("OrderNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Orders_OrderNumber");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_Orders_PublicId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Orders_Status");

                    b.HasIndex("SupplierId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EstimatedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FinalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FinalUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("FlowerBatchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestedQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierListingId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlowerBatchId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_OrderDetails_PublicId");

                    b.HasIndex("SupplierListingId");

                    b.ToTable("OrderDetails", t =>
                        {
                            t.HasCheckConstraint("CK_OrderDetail_ApprovedQuantity_LessOrEqual_RequestedQuantity", "[ApprovedQuantity] IS NULL OR [ApprovedQuantity] <= [RequestedQuantity]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_Payments_PublicId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_PaymentMethods_PublicId");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cash Payment",
                            IsActive = true,
                            IsDeleted = false,
                            MethodName = "Cash",
                            PublicId = new Guid("11111111-aaaa-aaaa-aaaa-111111111111")
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Credit Card Payment",
                            IsActive = true,
                            IsDeleted = false,
                            MethodName = "Credit Card",
                            PublicId = new Guid("22222222-bbbb-bbbb-bbbb-222222222222")
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bank Transfer Payment",
                            IsActive = true,
                            IsDeleted = false,
                            MethodName = "Bank Transfer",
                            PublicId = new Guid("33333333-cccc-cccc-cccc-333333333333")
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Digital Wallet Payment",
                            IsActive = true,
                            IsDeleted = false,
                            MethodName = "Digital Wallet",
                            PublicId = new Guid("44444444-dddd-dddd-dddd-444444444444")
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_PublicId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create, update, delete users",
                            IsDeleted = false,
                            PermissionName = "ManageUsers",
                            PublicId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create, update, delete orders",
                            IsDeleted = false,
                            PermissionName = "ManageOrders",
                            PublicId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create, update, delete flowers",
                            IsDeleted = false,
                            PermissionName = "ManageFlowers",
                            PublicId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc")
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create, update, delete suppliers",
                            IsDeleted = false,
                            PermissionName = "ManageSuppliers",
                            PublicId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd")
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "View system reports",
                            IsDeleted = false,
                            PermissionName = "ViewReports",
                            PublicId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee")
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Place orders",
                            IsDeleted = false,
                            PermissionName = "PlaceOrders",
                            PublicId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff")
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Manage supplier listings",
                            IsDeleted = false,
                            PermissionName = "ManageListings",
                            PublicId = new Guid("99999999-9999-9999-9999-999999999999")
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_Products_PublicId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.ProductFlower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlowerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityNeeded")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlowerId");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductFlowers_PublicId");

                    b.HasIndex("ProductId", "FlowerId")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductFlowers_ProductId_FlowerId_Unique");

                    b.ToTable("ProductFlowers");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.ProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductPhotos_PublicId");

                    b.HasIndex("ProductId", "IsPrimary")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductPhotos_ProductId_IsPrimary_Unique")
                        .HasFilter("[IsPrimary] = 1");

                    b.ToTable("ProductPhotos");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_PublicId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "System Administrator",
                            IsDeleted = false,
                            PublicId = new Guid("11111111-1111-1111-1111-111111111111"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Store Manager",
                            IsDeleted = false,
                            PublicId = new Guid("22222222-2222-2222-2222-222222222222"),
                            RoleName = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Store Staff",
                            IsDeleted = false,
                            PublicId = new Guid("33333333-3333-3333-3333-333333333333"),
                            RoleName = "Staff"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Customer",
                            IsDeleted = false,
                            PublicId = new Guid("44444444-4444-4444-4444-444444444444"),
                            RoleName = "Customer"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Supplier",
                            IsDeleted = false,
                            PublicId = new Guid("55555555-5555-5555-5555-555555555555"),
                            RoleName = "Supplier"
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_RolePermissions_PublicId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique()
                        .HasDatabaseName("IX_RolePermissions_RoleId_PermissionId_Unique");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Suppliers_Email");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_Suppliers_PublicId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.SupplierListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlowerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShelfLifeDays")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("SupplierPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlowerId");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_SupplierListings_PublicId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierListings");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.SupplierListingPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SupplierListingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_SupplierListingPhotos_PublicId");

                    b.HasIndex("SupplierListingId", "IsPrimary")
                        .IsUnique()
                        .HasDatabaseName("IX_SupplierListingPhotos_SupplierListingId_IsPrimary_Unique")
                        .HasFilter("[IsPrimary] = 1");

                    b.ToTable("SupplierListingPhotos");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.SystemLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_SystemLogs_CreatedAt");

                    b.HasIndex("OrderId");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_SystemLogs_PublicId");

                    b.HasIndex("UserId");

                    b.ToTable("SystemLogs");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.SystemNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecipientUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_SystemNotifications_PublicId");

                    b.HasIndex("RecipientUserId", "IsRead")
                        .HasDatabaseName("IX_SystemNotifications_RecipientUserId_IsRead");

                    b.ToTable("SystemNotifications");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_PublicId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_UserName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Delivery", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Order", "Order")
                        .WithMany("Deliveries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Flower", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.FlowerCategory", "FlowerCategory")
                        .WithMany("Flowers")
                        .HasForeignKey("FlowerCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FlowerCategory");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerBatch", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Flower", "Flower")
                        .WithMany("FlowerBatches")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Supplier", "Supplier")
                        .WithMany("FlowerBatches")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flower");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerDamageLog", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.FlowerBatch", "FlowerBatch")
                        .WithMany("FlowerDamageLogs")
                        .HasForeignKey("FlowerBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.User", "ReportedByUser")
                        .WithMany("DamageReports")
                        .HasForeignKey("ReportedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FlowerBatch");

                    b.Navigation("ReportedByUser");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerPhoto", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Flower", "Flower")
                        .WithMany("FlowerPhotos")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Order", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrders")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.User", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.OrderDetail", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.FlowerBatch", "FlowerBatch")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FlowerBatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FlowerSellingWebsite.Models.Entities.SupplierListing", "SupplierListing")
                        .WithMany("OrderDetails")
                        .HasForeignKey("SupplierListingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FlowerBatch");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("SupplierListing");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Payment", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.ProductFlower", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Flower", "Flower")
                        .WithMany("ProductFlowers")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Product", "Product")
                        .WithMany("ProductFlowers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flower");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.ProductPhoto", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Product", "Product")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.RolePermission", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.SupplierListing", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Flower", "Flower")
                        .WithMany("SupplierListings")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Supplier", "Supplier")
                        .WithMany("SupplierListings")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flower");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.SupplierListingPhoto", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.SupplierListing", "SupplierListing")
                        .WithMany("SupplierListingPhotos")
                        .HasForeignKey("SupplierListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierListing");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.SystemLog", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Order", "Order")
                        .WithMany("SystemLogs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FlowerSellingWebsite.Models.Entities.User", "User")
                        .WithMany("SystemLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.SystemNotification", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.User", "RecipientUser")
                        .WithMany("Notifications")
                        .HasForeignKey("RecipientUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("RecipientUser");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.User", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Flower", b =>
                {
                    b.Navigation("FlowerBatches");

                    b.Navigation("FlowerPhotos");

                    b.Navigation("ProductFlowers");

                    b.Navigation("SupplierListings");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerBatch", b =>
                {
                    b.Navigation("FlowerDamageLogs");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerCategory", b =>
                {
                    b.Navigation("Flowers");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Order", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");

                    b.Navigation("SystemLogs");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductFlowers");

                    b.Navigation("ProductPhotos");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Supplier", b =>
                {
                    b.Navigation("FlowerBatches");

                    b.Navigation("Orders");

                    b.Navigation("SupplierListings");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.SupplierListing", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("SupplierListingPhotos");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.User", b =>
                {
                    b.Navigation("CreatedOrders");

                    b.Navigation("CustomerOrders");

                    b.Navigation("DamageReports");

                    b.Navigation("Notifications");

                    b.Navigation("SystemLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
