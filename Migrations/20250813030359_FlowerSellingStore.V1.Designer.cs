// <auto-generated />
using System;
using FlowerSelling.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlowerSellingWebsite.Migrations
{
    [DbContext(typeof(FlowerSellingContext))]
    [Migration("20250813030359_FlowerSellingStore.V1")]
    partial class FlowerSellingStoreV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Deliveries", t =>
                        {
                            t.HasCheckConstraint("CK_Deliveries_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_Deliveries_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_Deliveries_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_Deliveries_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_Deliveries_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_Delivery_DeliveryStatus_Valid", "[DeliveryStatus] IS NULL OR [DeliveryStatus] IN ('Pending', 'Confirmed', 'Preparing', 'InTransit', 'OutForDelivery', 'Delivered', 'Failed', 'Cancelled', 'Returned')");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Flower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("SupplierId");

                    b.ToTable("Flowers", t =>
                        {
                            t.HasCheckConstraint("CK_Flower_Name_NotEmpty", "[Name] != ''");

                            t.HasCheckConstraint("CK_Flower_Price_NonNegative", "[Price] >= 0");

                            t.HasCheckConstraint("CK_Flower_StockQuantity_NonNegative", "[StockQuantity] >= 0");

                            t.HasCheckConstraint("CK_Flowers_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_Flowers_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_Flowers_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_Flowers_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_Flowers_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FlowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlowerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("FlowerBatches", t =>
                        {
                            t.HasCheckConstraint("CK_FlowerBatch_TotalAmount_NonNegative", "[TotalAmount] >= 0");

                            t.HasCheckConstraint("CK_FlowerBatches_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_FlowerBatches_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_FlowerBatches_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_FlowerBatches_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_FlowerBatches_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerBatchDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FlowerBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlowerBatchId");

                    b.HasIndex("FlowerId");

                    b.ToTable("FlowerBatchDetails", t =>
                        {
                            t.HasCheckConstraint("CK_FlowerBatchDetail_QuantityAvailable_LessOrEqualQuantity", "[QuantityAvailable] <= [Quantity]");

                            t.HasCheckConstraint("CK_FlowerBatchDetail_QuantityAvailable_NonNegative", "[QuantityAvailable] >= 0");

                            t.HasCheckConstraint("CK_FlowerBatchDetail_Quantity_Positive", "[Quantity] > 0");

                            t.HasCheckConstraint("CK_FlowerBatchDetail_UnitPrice_NonNegative", "[UnitPrice] >= 0");

                            t.HasCheckConstraint("CK_FlowerBatchDetails_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_FlowerBatchDetails_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_FlowerBatchDetails_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_FlowerBatchDetails_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_FlowerBatchDetails_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerDamageLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DamageQuantity")
                        .HasColumnType("int");

                    b.Property<string>("DamageReason")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FlowerBatchDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ReportedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlowerBatchDetailId");

                    b.ToTable("FlowerDamageLogs", t =>
                        {
                            t.HasCheckConstraint("CK_FlowerDamageLog_DamageQuantity_Positive", "[DamageQuantity] > 0");

                            t.HasCheckConstraint("CK_FlowerDamageLogs_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_FlowerDamageLogs_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_FlowerDamageLogs_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_FlowerDamageLogs_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_FlowerDamageLogs_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasCheckConstraint("CK_Order_TotalAmount_NonNegative", "[TotalAmount] >= 0");

                            t.HasCheckConstraint("CK_Orders_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_Orders_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_Orders_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_Orders_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_Orders_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FlowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlowerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails", t =>
                        {
                            t.HasCheckConstraint("CK_OrderDetail_Quantity_Positive", "[Quantity] > 0");

                            t.HasCheckConstraint("CK_OrderDetail_UnitPrice_NonNegative", "[UnitPrice] >= 0");

                            t.HasCheckConstraint("CK_OrderDetails_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_OrderDetails_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_OrderDetails_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_OrderDetails_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_OrderDetails_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments", t =>
                        {
                            t.HasCheckConstraint("CK_Payment_Amount_Positive", "[Amount] > 0");

                            t.HasCheckConstraint("CK_Payment_PaymentStatus_Valid", "[PaymentStatus] IS NULL OR [PaymentStatus] IN ('Pending', 'Processing', 'Completed', 'Failed', 'Cancelled', 'Refunded', 'PartialRefund')");

                            t.HasCheckConstraint("CK_Payments_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_Payments_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_Payments_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_Payments_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_Payments_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PermissionName")
                        .IsUnique();

                    b.ToTable("Permissions", t =>
                        {
                            t.HasCheckConstraint("CK_Permission_PermissionName_NotEmpty", "[PermissionName] != ''");

                            t.HasCheckConstraint("CK_Permissions_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_Permissions_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_Permissions_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_Permissions_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_Permissions_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae0877e4-8fc8-4aa8-8308-788a5871b7b1"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(1576),
                            Description = "View users",
                            IsDeleted = false,
                            PermissionName = "VIEW_USERS"
                        },
                        new
                        {
                            Id = new Guid("f33c7396-3179-4952-822d-38f447948e87"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(1863),
                            Description = "Create users",
                            IsDeleted = false,
                            PermissionName = "CREATE_USERS"
                        },
                        new
                        {
                            Id = new Guid("4d5d3e97-dc40-452f-9121-2b538ff458b3"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(1883),
                            Description = "Edit users",
                            IsDeleted = false,
                            PermissionName = "EDIT_USERS"
                        },
                        new
                        {
                            Id = new Guid("0bf05e4e-e28d-4307-8869-964c15792623"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(1899),
                            Description = "Delete users",
                            IsDeleted = false,
                            PermissionName = "DELETE_USERS"
                        },
                        new
                        {
                            Id = new Guid("4e2cb3c1-aa4d-4d7b-9a6f-bb0b1be00194"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(1915),
                            Description = "View orders",
                            IsDeleted = false,
                            PermissionName = "VIEW_ORDERS"
                        },
                        new
                        {
                            Id = new Guid("c2410227-e503-4393-8374-bab63d753903"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(1936),
                            Description = "Create orders",
                            IsDeleted = false,
                            PermissionName = "CREATE_ORDERS"
                        },
                        new
                        {
                            Id = new Guid("28189da3-2188-49d5-8fc7-4e505ad5267c"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(1951),
                            Description = "Edit orders",
                            IsDeleted = false,
                            PermissionName = "EDIT_ORDERS"
                        },
                        new
                        {
                            Id = new Guid("65f4a85c-b5ea-44cf-a2f3-46c3c1a83535"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(1966),
                            Description = "Delete orders",
                            IsDeleted = false,
                            PermissionName = "DELETE_ORDERS"
                        },
                        new
                        {
                            Id = new Guid("9519a84c-d78e-4570-9ed3-698f02bc8d59"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(1981),
                            Description = "View flowers",
                            IsDeleted = false,
                            PermissionName = "VIEW_FLOWERS"
                        },
                        new
                        {
                            Id = new Guid("dbaada46-49c8-472a-8acc-8eeb30b29856"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(2001),
                            Description = "Create flowers",
                            IsDeleted = false,
                            PermissionName = "CREATE_FLOWERS"
                        },
                        new
                        {
                            Id = new Guid("74f91d4e-1fdc-4984-81a8-fa08910c58b0"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(2017),
                            Description = "Edit flowers",
                            IsDeleted = false,
                            PermissionName = "EDIT_FLOWERS"
                        },
                        new
                        {
                            Id = new Guid("09d9935a-ce59-40b0-9f6f-2afd43363a7d"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(2032),
                            Description = "Delete flowers",
                            IsDeleted = false,
                            PermissionName = "DELETE_FLOWERS"
                        },
                        new
                        {
                            Id = new Guid("41e3f332-a767-418c-92f4-89257dc2cc9f"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(2046),
                            Description = "View reports",
                            IsDeleted = false,
                            PermissionName = "VIEW_REPORTS"
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products", t =>
                        {
                            t.HasCheckConstraint("CK_Product_Price_NonNegative", "[Price] >= 0");

                            t.HasCheckConstraint("CK_Products_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_Products_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_Products_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_Products_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_Products_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.ProductFlower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FlowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlowerId");

                    b.HasIndex("ProductId", "FlowerId")
                        .IsUnique();

                    b.ToTable("ProductFlowers", t =>
                        {
                            t.HasCheckConstraint("CK_ProductFlower_QuantityUsed_Positive", "[QuantityUsed] > 0");

                            t.HasCheckConstraint("CK_ProductFlowers_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_ProductFlowers_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_ProductFlowers_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_ProductFlowers_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_ProductFlowers_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.ProductFlowerBatchUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FlowerBatchDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlowerBatchDetailId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFlowerBatchUsages", t =>
                        {
                            t.HasCheckConstraint("CK_ProductFlowerBatchUsage_QuantityUsed_Positive", "[QuantityUsed] > 0");

                            t.HasCheckConstraint("CK_ProductFlowerBatchUsages_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_ProductFlowerBatchUsages_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_ProductFlowerBatchUsages_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_ProductFlowerBatchUsages_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_ProductFlowerBatchUsages_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles", t =>
                        {
                            t.HasCheckConstraint("CK_Role_RoleName_NotEmpty", "[RoleName] != ''");

                            t.HasCheckConstraint("CK_Roles_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_Roles_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_Roles_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_Roles_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_Roles_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d5f1ab9-e880-44cf-ac62-e731e6fdffdf"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 744, DateTimeKind.Utc).AddTicks(1850),
                            Description = "System Administrator",
                            IsDeleted = false,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("d7967856-9d44-487a-ab3c-c593e53de227"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 744, DateTimeKind.Utc).AddTicks(2132),
                            Description = "Regular User",
                            IsDeleted = false,
                            RoleName = "User"
                        },
                        new
                        {
                            Id = new Guid("8e295f13-51b1-43c1-b911-fbc6e6ca9fb3"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 744, DateTimeKind.Utc).AddTicks(2134),
                            Description = "Staff Member",
                            IsDeleted = false,
                            RoleName = "Staff"
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions", t =>
                        {
                            t.HasCheckConstraint("CK_RolePermissions_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_RolePermissions_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_RolePermissions_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_RolePermissions_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_RolePermissions_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Suppliers", t =>
                        {
                            t.HasCheckConstraint("CK_Supplier_SupplierName_NotEmpty", "[SupplierName] != ''");

                            t.HasCheckConstraint("CK_Suppliers_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_Suppliers_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_Suppliers_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_Suppliers_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_Suppliers_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.SystemLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("RecordId");

                    b.HasIndex("UserId");

                    b.ToTable("SystemLogs", t =>
                        {
                            t.HasCheckConstraint("CK_SystemLog_Action_NotEmpty", "[Action] IS NULL OR [Action] != ''");

                            t.HasCheckConstraint("CK_SystemLog_TableName_NotEmpty", "[TableName] IS NULL OR [TableName] != ''");

                            t.HasCheckConstraint("CK_SystemLogs_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_SystemLogs_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_SystemLogs_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_SystemLogs_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_SystemLogs_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("CK_User_Email_Format", "[Email] IS NULL OR [Email] LIKE '%@%.%'");

                            t.HasCheckConstraint("CK_User_Phone_Format", "[Phone] IS NULL OR LEN([Phone]) >= 10");

                            t.HasCheckConstraint("CK_User_UserName_NotEmpty", "[UserName] != ''");

                            t.HasCheckConstraint("CK_Users_CreatedAt_NotFuture", "[CreatedAt] <= DATEADD(minute, 5, GETUTCDATE())");

                            t.HasCheckConstraint("CK_Users_DeletedAt_AfterCreated", "[DeletedAt] IS NULL OR [DeletedAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_Users_DeletedAt_RequiredWhenDeleted", "[IsDeleted] = 0 OR ([IsDeleted] = 1 AND [DeletedAt] IS NOT NULL)");

                            t.HasCheckConstraint("CK_Users_Id_NotEmpty", "[Id] != '00000000-0000-0000-0000-000000000000'");

                            t.HasCheckConstraint("CK_Users_UpdatedAt_AfterCreated", "[UpdatedAt] IS NULL OR [UpdatedAt] >= [CreatedAt]");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("37b8d4a8-db98-4486-b1d9-afefe3b534b7"),
                            CreatedAt = new DateTime(2025, 8, 13, 3, 3, 58, 745, DateTimeKind.Utc).AddTicks(4412),
                            Email = "admin@flowershop.com",
                            FullName = "System Administrator",
                            IsDeleted = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5G8J5G8J5G8J5G8J5G8J5G8J5G8J5G8J5G8J5G8J5G8J5G8J5G8J5G8J5G8J5G8J5G8J5G8J5G8J5G8=",
                            RoleId = new Guid("5d5f1ab9-e880-44cf-ac62-e731e6fdffdf"),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Delivery", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Order", "Order")
                        .WithMany("Deliveries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Flower", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Supplier", "Supplier")
                        .WithMany("Flowers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerBatch", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Flower", "Flower")
                        .WithMany("FlowerBatches")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flower");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerBatchDetail", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.FlowerBatch", "FlowerBatch")
                        .WithMany("FlowerBatchDetails")
                        .HasForeignKey("FlowerBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Flower", "Flower")
                        .WithMany()
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flower");

                    b.Navigation("FlowerBatch");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerDamageLog", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.FlowerBatchDetail", "FlowerBatchDetail")
                        .WithMany("FlowerDamageLogs")
                        .HasForeignKey("FlowerBatchDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowerBatchDetail");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Order", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.OrderDetail", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Flower", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("FlowerId");

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Payment", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.ProductFlower", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Flower", "Flower")
                        .WithMany("ProductFlowers")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Product", "Product")
                        .WithMany("ProductFlowers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flower");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.ProductFlowerBatchUsage", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.FlowerBatchDetail", "FlowerBatchDetail")
                        .WithMany()
                        .HasForeignKey("FlowerBatchDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Product", "Product")
                        .WithMany("ProductFlowerBatchUsages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowerBatchDetail");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.RolePermission", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.SystemLog", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Order", "Order")
                        .WithMany("SystemLogs")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowerSellingWebsite.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.User", b =>
                {
                    b.HasOne("FlowerSellingWebsite.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Flower", b =>
                {
                    b.Navigation("FlowerBatches");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductFlowers");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerBatch", b =>
                {
                    b.Navigation("FlowerBatchDetails");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.FlowerBatchDetail", b =>
                {
                    b.Navigation("FlowerDamageLogs");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Order", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");

                    b.Navigation("SystemLogs");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductFlowerBatchUsages");

                    b.Navigation("ProductFlowers");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.Supplier", b =>
                {
                    b.Navigation("Flowers");
                });

            modelBuilder.Entity("FlowerSellingWebsite.Models.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
